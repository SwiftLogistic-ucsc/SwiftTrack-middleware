version: "3.8"
services:
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    command:
      - redpanda start
      - --smp=1
      - --overprovisioned
      - --node-id=0
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: swifttrack
      POSTGRES_USER: swifttrack_user
      POSTGRES_PASSWORD: swifttrack_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swifttrack_user -d swifttrack"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services
  order-service:
    build:
      context: ./services/order-service
      dockerfile_inline: |
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        EXPOSE 4000
        CMD ["npm", "start"]
    ports:
      - "4000:4000"
    environment:
      - KAFKA_BROKER=redpanda:9092
      - DATABASE_URL=postgresql://swifttrack_user:swifttrack_pass@postgres:5432/swifttrack
      - REDIS_URL=redis://redis:6379
      - CMS_URL=http://cms-mock:5001
      - WMS_URL=http://wms-mock:5002
      - ROS_URL=http://ros-mock:5003
      - ORDER_EVENTS_TOPIC=swift-logistics-events
    depends_on:
      postgres:
        condition: service_healthy
      redpanda:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:4000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  driver-service:
    build:
      context: ./services/driver-service
      dockerfile_inline: |
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        EXPOSE 4001
        CMD ["npm", "start"]
    ports:
      - "4001:4001"
    environment:
      - KAFKA_BROKER=redpanda:9092
      - DATABASE_URL=postgresql://swifttrack_user:swifttrack_pass@postgres:5432/swifttrack
      - REDIS_URL=redis://redis:6379
    volumes:
      - driver_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redpanda:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:4001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile_inline: |
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        EXPOSE 4002
        CMD ["npm", "start"]
    ports:
      - "4002:4002"
    environment:
      - KAFKA_BROKER=redpanda:9092
      - DATABASE_URL=postgresql://swifttrack_user:swifttrack_pass@postgres:5432/swifttrack
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - EMAIL_USER=swifttrack@example.com
      - EMAIL_PASS=your_email_password
    depends_on:
      postgres:
        condition: service_healthy
      redpanda:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:4002/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Services
  cms-mock:
    build:
      context: ./services/cms-mock
      dockerfile_inline: |
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        EXPOSE 5001
        CMD ["npm", "start"]
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  wms-mock:
    build:
      context: ./services/wms-mock
      dockerfile_inline: |
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        EXPOSE 5002
        CMD ["npm", "start"]
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    volumes:
      - ./services/wms-mock/data:/app/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5002/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  ros-mock:
    build:
      context: ./services/ros-mock
      dockerfile_inline: |
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm install
        COPY . .
        EXPOSE 5003
        CMD ["npm", "start"]
    ports:
      - "5003:5003"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5003/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Interface
  web-interface:
    build:
      context: .
      dockerfile_inline: |
        FROM nginx:alpine
        COPY index.html /usr/share/nginx/html/
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
    ports:
      - "8080:80"
    depends_on:
      - order-service
      - driver-service
      - notification-service
    restart: unless-stopped

volumes:
  postgres_data:
  driver_uploads:
